{"name":"Redux-flash-notification","tagline":"An es6 growl notification plugin for redux","body":"# Redux Flash Notification Example\r\nAn es6 growl-like notification plugin for react and redux.\r\n\r\nDemo: [Live Example](http://posabsolute.github.io/redux-flash-notification-example/) | [Source](https://github.com/posabsolute/redux-flash-notification-example)\r\n\r\nBetter Documentation: [http://posabsolute.github.io/redux-flash-notification](http://posabsolute.github.io/redux-flash-notification)\r\n\r\n## Integration\r\n\r\n\r\n1 npm install 'flash-notification-react-redux' --save\r\n\r\n\r\n2 Add the reducer to your root reducer\r\n\r\n```javascript\r\n\r\nimport GrowlerReducer from 'flash-notification-react-redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  growler: GrowlerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n```\r\n\r\n3 Add the growler component to your app root component so it is always accessible\r\n```javascript\r\nimport { GrowlerComponent } from 'flash-notification-react-redux';\r\n\r\nexport class App extends Component {\r\n  static propTypes = {\r\n    children: React.PropTypes.any,\r\n  }\r\n  render() {\r\n    return (\r\n      <section>\r\n        <GrowlerComponent />\r\n        {this.props.children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n4 Add webpack loaders to load es6 files.\r\n```javascript\r\n  module: {\r\n    loaders: [{\r\n      test:[/\\.jsx$/,  /\\.js$/],\r\n      loaders: ['react-hot', 'babel?stage=0&loose[]=es6.modules'],\r\n      include: [\r\n        path.resolve(__dirname, \"src\"),\r\n        path.resolve(__dirname, \"node_modules/flash-notification-react-redux\")\r\n      ],\r\n    }, {\r\n      test: [/\\.scss$/, /\\.css$/],\r\n      loader: 'css?localIdentName=[path]!postcss-loader!sass',\r\n    }],\r\n  },\r\n};\r\n```\r\n\r\n5 You're done.\r\n\r\n\r\n## Usage\r\n\r\n### With the reducer\r\n\r\nYou can change the store state to show the growler.\r\n\r\nExample:\r\n\r\n```javascript\r\ndispatch({\r\n  type: 'GROWLER__SHOW',\r\n  growler: {\r\n    text: 'Please enter your JIRA url',\r\n    type: 'growler--error',\r\n  },\r\n});\r\n```\r\n\r\n```javascript\r\ndispatch({\r\n  type: 'GROWLER__SHOW',\r\n  growler: {\r\n    text: 'You have succesfully logged in',\r\n    type: 'growler--success',\r\n  },\r\n});\r\n```\r\n\r\n### With the actions\r\n\r\n<<<<<<< HEAD\r\n\r\n\r\nIf made available in your components, you can call the action showGrowler(text, status),\r\n=======\r\nIf made available in your components, you can use multiple actions to show the growler component,\r\n>>>>>>> small api changes, fix documentation\r\n\r\nExample:\r\n```javascript\r\nimport React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport {GrowlerActions} from 'actions/sprints.action';\r\n\r\nconst mapStateToProps = state => ({});\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    ...bindActionCreators(growlerActions, dispatch),\r\n  };\r\n};\r\n\r\n@connect(mapStateToProps, mapDispatchToProps)\r\nexport default class SprintsListContainer extends React.Component {\r\n  render() {\r\n    return <SprintsListComponent {...this.props} />;\r\n  }\r\n}\r\n```\r\n### Available Actions\r\n\r\n### showGrowlerSuccess(text)\r\n\r\n### showGrowlerWrror(text)\r\n\r\n### showGrowler(text, type)\r\n\r\nUsed when you want to show custom messages. The type will be added as a CSS class.\r\n\r\n\r\n## Options\r\n\r\nOptions are passed down when you add the component to your app root.\r\n\r\n| Option | Default Value          | Default Value          | Description          |\r\n| ------------- | ----------- | ----------- | ----------- |\r\n| shownFor      | 3000| Milliseconds | Time the growler is shown |\r\n| messages     | -     | Object | Localization in every supported languages of your messages |\r\n| currentLocale     | enUS     | String |  Locale used to retrieve messages |\r\n\r\n```javascript\r\nimport { GrowlerComponent } from 'flash-notification-react-redux';\r\nimport growlerMessages from 'locales/growler.locale.js';\r\n\r\nexport class App extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <GrowlerComponent messages={growlerMessages} currentLocale='enUS' shownFor=\"9000\" />\r\n        {this.props.children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n### Messages\r\n\r\nBy default the growler will show the text passed down by the action, however when mounting the component you can specify localized text. When shown, the component will verify if the text passed match a key.\r\n\r\n```javascript\r\nimport { GrowlerComponent } from 'flash-notification-react-redux';\r\nimport growlerMessages from 'locales/growler.locale.js';\r\n\r\n// usage in render\r\n<GrowlerComponent messages={growlerMessages} currentLocale='enUS' />\r\n```\r\n#### currentLocale (default: enUS)\r\nYou can specify the language used by using the currentLocale option.\r\n\r\n\r\n#### Messages object Example\r\n```javascript\r\n{\r\n  enUS: {\r\n    error: 'There was en error'\r\n  },\r\n  frCA: \r\n     error: 'Il y a eu une erreur'\r\n}\r\n```\r\n\r\n### shownFor (default: 3000)\r\nTime the growler is shown in milliseconds\r\n\r\n```javascript\r\n<GrowlerComponent shownFor=\"6000\" />\r\n```\r\n\r\n## Limitations\r\n\r\nThis component is based on the use of redux, react, es6 & es7 (decorators) and webpack for loading the css as an import module.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}